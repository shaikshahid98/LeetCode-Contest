/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    class cmp
    {
        public:
        bool operator()(ListNode* p1,ListNode* p2)
        {
            return p1->val > p2->val;
        }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*,vector<ListNode*>,cmp> pq;
        bool ok = false;
        for(int i=0;i<lists.size();i++) if(lists[i]) ok=true;
        if(!ok) return nullptr;
        for(int i=0;i<lists.size();i++)
        {
            auto cur = lists[i];
            while(cur)
            {
                pq.push(cur);
                cur=cur->next;
            }
        }
        ListNode* head = nullptr,*tmp = new ListNode();
        while(pq.size())
        {
            auto cur = pq.top();pq.pop();
            if(head == nullptr ) head  = cur;
            tmp->next = cur;
            tmp = tmp->next;
        }
        tmp->next = nullptr;
        return head;
    }
};

---------------------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* l1,ListNode* l2)
    {
        if( !l1 || !l2 ) return l1 ? l1 : l2;
        if(l1 -> val <= l2->val)
        {
            l1->next = merge(l1->next,l2);
            return l1;
        }
             
        else l2->next = merge(l1,l2->next);
        return l2;

    }
    ListNode* mergeK(int s,int e,vector<ListNode*> &lst)
    {
        if(s == e) return lst[s];
        if(s<e)
        {
            int p = (s+e)/2;
            auto l1 = mergeK(s,p,lst);
            auto l2 = mergeK(p+1,e,lst);
            return merge(l1,l2);
        }
        return nullptr;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        return mergeK(0,lists.size()-1,lists);
    }
};